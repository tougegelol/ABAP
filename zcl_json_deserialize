CLASS zcl_json DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    TYPES json_regex TYPE char40 .
    TYPES json_geass TYPE char03 .
    TYPES:
      BEGIN OF val,
        fieldname TYPE fieldname,
        value     TYPE REF TO data,
        type(1),
      END OF val .
    TYPES:
      BEGIN OF valx,
        fieldname TYPE fieldname,
        value     TYPE string,
        type(1),
      END OF valx .
    TYPES:
      val_tab  TYPE TABLE OF val .
    TYPES:
      valx_tab TYPE TABLE OF valx .
    TYPES:
      serial_tab TYPE TABLE OF string .

    CONSTANTS split_t TYPE json_regex VALUE '"([^"]*)":\[\{"([^\]]*)"\}\]' ##NO_TEXT.
    CONSTANTS split_s TYPE json_regex VALUE '"([^"]*)":\{([^\{\}]*)\}' ##NO_TEXT.
    CONSTANTS split_f TYPE json_regex VALUE '"([^"]*)":"([^"]*)"' ##NO_TEXT.
    DATA tseri TYPE serial_tab .
    DATA sseri TYPE serial_tab .
    DATA fseri TYPE serial_tab .
    DATA json TYPE string .
    CONSTANTS regex_f TYPE json_regex VALUE '"([^"]*)"' ##NO_TEXT.
    CONSTANTS regex_s TYPE json_regex VALUE '"([^"]*)":\{' ##NO_TEXT.
    CONSTANTS regex_t TYPE json_regex VALUE '"([^"]*)":\[' ##NO_TEXT.
    CONSTANTS split_s2 TYPE json_regex VALUE '\{([^\{\}]*)\}' ##NO_TEXT.
    DATA log TYPE val_tab .
    DATA xlog TYPE valx_tab .

    METHODS deserialize
      IMPORTING
        VALUE(im_json) TYPE string .
    METHODS split_type
      IMPORTING
        VALUE(type) TYPE c .
    METHODS get_field
      IMPORTING
        !serial_tab TYPE serial_tab
      RETURNING
        VALUE(x1)   LIKE log .
    METHODS get_table
      IMPORTING
        !serial_tab TYPE serial_tab
      RETURNING
        VALUE(x3)   LIKE log .
    METHODS get_struc
      IMPORTING
        !serial_tab TYPE serial_tab
      RETURNING
        VALUE(x2)   LIKE log .
    METHODS execute
      IMPORTING
        VALUE(im_json) TYPE string .
  PROTECTED SECTION.
private section.

  constants GEASS type JSON_GEASS value 'TSF' ##NO_TEXT.
ENDCLASS.



CLASS ZCL_JSON IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_JSON->DESERIALIZE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IM_JSON                        TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD deserialize.

    json = im_json.

    DATA: offset TYPE i.

    DO 3 TIMES.
      offset = sy-index - 1.
      split_type( type = geass+offset(1) ).
    ENDDO.

    CLEAR log.

    APPEND LINES OF get_table( tseri ) TO log.
    APPEND LINES OF get_struc( sseri ) TO log.
    APPEND LINES OF get_field( fseri ) TO log.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_JSON->EXECUTE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IM_JSON                        TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD execute.

    DATA: xseri  TYPE LINE OF serial_tab,
          ls     TYPE match_result,
          length TYPE i,
          offset TYPE i,
          ls_log TYPE LINE OF valx_tab.

    json = im_json.

    DO 3 TIMES.
      offset = sy-index - 1.
      split_type( type = geass+offset(1) ).
    ENDDO.

    CLEAR xlog.
    LOOP AT tseri INTO xseri.
      FIND FIRST OCCURRENCE OF REGEX `"([^"]*)":` IN xseri RESULTS ls.
      IF sy-subrc EQ 0.
        offset = ls-offset + 1.
        length = ls-length - 3.
        ls_log-fieldname = xseri+offset(length).
        ls_log-type = 'T'.

        REPLACE FIRST OCCURRENCE OF xseri+ls-offset(ls-length) IN xseri WITH space.
        ls_log-value = xseri.
        APPEND ls_log TO xlog.
      ENDIF.
    ENDLOOP.

    LOOP AT sseri INTO xseri.
      FIND FIRST OCCURRENCE OF REGEX `"([^"]*)":` IN xseri RESULTS ls.
      IF sy-subrc EQ 0.
        offset = ls-offset + 1.
        length = ls-length - 3.
        ls_log-fieldname = xseri+offset(length).
        ls_log-type = 'S'.

        REPLACE FIRST OCCURRENCE OF xseri+ls-offset(ls-length) IN xseri WITH space.
        ls_log-value = xseri.
        APPEND ls_log TO xlog.
      ENDIF.
    ENDLOOP.

    LOOP AT fseri INTO xseri.
      FIND FIRST OCCURRENCE OF REGEX `"([^"]*)":` IN xseri RESULTS ls.
      IF sy-subrc EQ 0.
        offset = ls-offset + 1.
        length = ls-length - 3.
        ls_log-fieldname = xseri+offset(length).
        ls_log-type = 'F'.
        REPLACE FIRST OCCURRENCE OF xseri+ls-offset(ls-length) IN xseri WITH space.
        ls_log-value = xseri.
        APPEND ls_log TO xlog.
      ENDIF.
    ENDLOOP.




  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_JSON->GET_FIELD
* +-------------------------------------------------------------------------------------------------+
* | [--->] SERIAL_TAB                     TYPE        SERIAL_TAB
* | [<-()] X1                             LIKE        LOG
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_field.

    DATA: offset  TYPE i,
          length  TYPE i,
          lt      TYPE match_result_tab,
          ls      TYPE match_result,
          content TYPE string,
          ls_val  TYPE val.

    FIELD-SYMBOLS <value> TYPE any.

    LOOP AT serial_tab INTO content.
      ls_val-type = geass+2(1).
      FIND FIRST OCCURRENCE OF REGEX regex_f IN content RESULTS ls.
      IF sy-subrc EQ 0.
        offset = ls-offset + 1.
        length = ls-length - 2.
        ls_val-fieldname = content+offset(length).
        REPLACE FIRST OCCURRENCE OF content+ls-offset(ls-length) IN content WITH space.
      ENDIF.
      FIND FIRST OCCURRENCE OF REGEX regex_f IN content RESULTS ls.
      IF sy-subrc EQ 0.
        offset = ls-offset + 1.
        length = ls-length - 2.
        CREATE DATA ls_val-value TYPE string.
        ASSIGN ls_val-value->* TO <value>.
        <value> = content+offset(length).
        REPLACE FIRST OCCURRENCE OF content+ls-offset(ls-length) IN content WITH space.
      ENDIF.
      APPEND ls_val TO x1.
    ENDLOOP.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_JSON->GET_STRUC
* +-------------------------------------------------------------------------------------------------+
* | [--->] SERIAL_TAB                     TYPE        SERIAL_TAB
* | [<-()] X2                             LIKE        LOG
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_struc.

    DATA: offset  TYPE i,
          length  TYPE i,
          lt      TYPE match_result_tab,
          ls      TYPE match_result,
          content TYPE string,
          ls_val  TYPE val,
          lt_val  TYPE val_tab,
          itab    TYPE serial_tab.

    FIELD-SYMBOLS: <value> TYPE table,
                   <struc> TYPE any.

    LOOP AT serial_tab INTO content.
      ls_val-type = geass+1(1).
      FIND FIRST OCCURRENCE OF REGEX regex_s IN content RESULTS ls.
      IF sy-subrc EQ 0.
        offset = ls-offset + 1.
        length = ls-length - 4.
        ls_val-fieldname = content+offset(length).
        REPLACE FIRST OCCURRENCE OF content+ls-offset(ls-length) IN content WITH space.
      ENDIF.
      FIND ALL OCCURRENCES OF REGEX split_f IN content RESULTS lt.
      IF sy-subrc EQ 0.
        CLEAR itab.
        LOOP AT lt INTO ls.
          APPEND content+ls-offset(ls-length) TO itab.
        ENDLOOP.
        CREATE DATA ls_val-value TYPE val_tab.
        ASSIGN ls_val-value->* TO <value>.
        <value> = get_field( itab ).
      ENDIF.
      APPEND ls_val TO x2.
    ENDLOOP.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_JSON->GET_TABLE
* +-------------------------------------------------------------------------------------------------+
* | [--->] SERIAL_TAB                     TYPE        SERIAL_TAB
* | [<-()] X3                             LIKE        LOG
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_table.

    DATA: offset  TYPE i,
          length  TYPE i,
          lt      TYPE match_result_tab,
          ls      TYPE match_result,
          content TYPE string,
          ls_val  TYPE val,
          lt_val  TYPE val_tab,
          itab    TYPE serial_tab,
          line    TYPE string.

    FIELD-SYMBOLS: <value> TYPE table,
                   <struc> TYPE any.

    LOOP AT serial_tab INTO content.
      ls_val-type = geass+0(1).
      FIND FIRST OCCURRENCE OF REGEX regex_t IN content RESULTS ls.
      IF sy-subrc EQ 0.
        offset = ls-offset + 1.
        length = ls-length - 4.
        ls_val-fieldname = content+offset(length).
        REPLACE FIRST OCCURRENCE OF content+ls-offset(ls-length) IN content WITH space.
      ENDIF.
      FIND ALL OCCURRENCES OF REGEX split_s2 IN content RESULTS lt.
      IF sy-subrc EQ 0.
        CLEAR itab.
        LOOP AT lt INTO ls.
          CLEAR line.
          line = `"` && sy-tabix && `"` && `:` && content+ls-offset(ls-length).
          APPEND line TO itab.
        ENDLOOP.
        CREATE DATA ls_val-value TYPE val_tab.
        ASSIGN ls_val-value->* TO <value>.
        <value> = get_struc( itab ).
      ENDIF.
      APPEND ls_val TO x3.
    ENDLOOP.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_JSON->SPLIT_TYPE
* +-------------------------------------------------------------------------------------------------+
* | [--->] TYPE                           TYPE        C
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD split_type.

    DATA: offset TYPE i,
          lt     TYPE match_result_tab,
          ls     TYPE match_result.

    DATA: regex(7),
          table(5).

    FIELD-SYMBOLS: <regex> TYPE c,<table> TYPE table.

    regex = `SPLIT_` && type.
    table = type && `SERI`.

    ASSIGN (regex) TO <regex>.
    ASSIGN (table) TO <table>.

    CLEAR <table>.

    DO.
      FIND FIRST OCCURRENCE OF REGEX <regex> IN json RESULTS ls.
      IF sy-subrc NE 0.
        EXIT.
      ENDIF.
      APPEND json+ls-offset(ls-length) TO <table>.

      REPLACE ALL OCCURRENCES OF json+ls-offset(ls-length) IN json WITH space.
    ENDDO.

  ENDMETHOD.
ENDCLASS.
